Object Oriented Programming Language

Imagine objects as literally little demons carrying out computational
tasks and sending messages to each other. Each demon will wait for
a message, carry out a program to produce a response, and repeat.

There are two kinds of demons, ones that can magically evaluate an expression
via a special set of laws, and ones that interact with the outside world for
the purposes of I/O and timekeeping. The first kind's behavior is completed
defined as an application of some case expression to whatever message it happens
to get. The second kind of demon cannot be defined as an expression and have
generally undefined behavior.

Each demon has a private, infinitely big notebook to write values in and
read them later if necessary. During the course of a computation he
might send a message to another object, perhaps waiting for a response
before continuing. He can also self-destruct or cancel another demon's
computation in progress via an asynchronous signal.

This is the true form of "object oriented programming." :)

expressions:
symbol    symbol
number    1234
cons      (a b c)
case      case{1 -> a; 2 ->b}
variable  $x
apply     [$f x]
          case(x){x -> y; y -> x}
math      [+ $x 1]
letrec    letrec($x){$x = $y; $y = 3}
do        do{$a = [$f x]; $b = [$g $a]; [$g $b]}
send      send{name, value}
request   request{name, value}
          request{name, value, $error-handler}
load      load{field, default}
store     store{field, value}
halt      halt{value}
error     error{value}
throw     throw{name, value}
new       new{name, $message-handler}

objects:
* independent concurrent processes
* internal mutable storage
* global identifier
* handles messages fifo, one at a time
* sends messages to other objects, perhaps waiting for response
* can be asynchronously signaled to cancel the current operation
* system objects represent real world i/o and time

data:
symbol   non-numeric general value
number   that is to say integers
tuple    a vector of other values
closure  a transformation from values to values

math:
Numbers have several binary arithmetic operations built in.
+ - * / % ^ do what you would expect.
Division by zero causes an error.
Also # compares non closure values, returning either GT LT or EQ.
